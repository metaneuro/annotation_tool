(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{379:function(t,e,n){"use strict";n.r(e);var r=n(0);n(241),n(5),n(1),n(240),n(73),n(75),n(18),n(22),n(63),n(50),n(11),n(4),n(64),n(74),n(51);function o(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,c=!0,v=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return c=t.done,t},e:function(t){v=!0,o=t},f:function(){try{c||null==n.return||n.return()}finally{if(v)throw o}}}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}var c={props:{relevantColumns:{default:function(){return[]},required:!0,type:Array},title:{type:String,required:!0},uniqueValues:{default:function(){},required:!0,type:Object}},inject:["columnDescription","dataTable","isMissingValue","missingColumnValues","missingValueLabel","valueDescription"],name:"AnnotVocabulary",data:function(){return{fields:["column_name","raw_value","description","select_a_vocabulary_term","missing_value"],tableItems:[],uiText:{generalInstructions:"Annotate each unique value",missingValueButton:"Mark as missing",placeholderText:"e.g. Parkinson's Disease",saveButton:"Save Annotation",vocabTermInstructions:"Please provide a SNOMED-CT term"},vocabularyMapping:{},vocabState:null}},computed:{canSaveAnnotation:function(){var t=!1;for(var e in this.vocabularyMapping)for(var n in this.vocabularyMapping[e]){if(""===this.vocabularyMapping[e][n]&&!this.isMissingValue(e,n)){t=!0;break}}return t},saveButtonColor:function(){return this.canSaveAnnotation?"secondary":"success"}},watch:{"$store.state.missingColumnValues":{deep:!0,handler:function(t,e){this.refreshTableItems()}},tableItems:{deep:!0,handler:function(t,e){var n,r=o(t);try{for(r.s();!(n=r.n()).done;){var l=n.value;this.storeMapping(l.column_name,l.raw_value,l.select_a_vocabulary_term)}}catch(t){r.e(t)}finally{r.f()}}}},created:function(){this.initializeMapping()},mounted:function(){this.refreshTableItems()},methods:{applyAnnotation:function(){for(var t=structuredClone(this.dataTable.annotated),e=0;e<t.length;e++)for(var n in t[e])this.relevantColumns.includes(n)&&(this.isMissingValue(n,t[e][n])?t[e][n]=this.missingValueLabel:t[e][n]=this.transformedValue(n,t[e][n]));this.$emit("update:dataTable",{transformedTable:t})},declareMissing:function(t){for(var e=-1,n=0;n<this.tableItems.length;n++)if(this.tableItems[n].column_name==t.column_name){e=n;break}this.$delete(this.tableItems,e),this.storeMapping(t.column_name,t.raw_value,""),this.$emit("update:missingValue",{column:t.column_name,value:t.raw_value})},initializeMapping:function(){for(var t in this.vocabularyMapping={},this.uniqueValues){this.vocabularyMapping[t]={};var e,n=o(this.uniqueValues[t]);try{for(n.s();!(e=n.n()).done;){var r=e.value;this.vocabularyMapping[t][r]=""}}catch(t){n.e(t)}finally{n.f()}}},refreshTableItems:function(){for(var t in this.tableItems=[],this.vocabularyMapping)for(var e=0,n=Object.keys(this.vocabularyMapping[t]);e<n.length;e++){var r=n[e];if(!this.isMissingValue(t,r)){var o=this.valueDescription(t,r),l="";Object.keys(this.vocabularyMapping).includes(t)&&(l=this.vocabularyMapping[t][r]),this.tableItems.push({column_name:t,description:null===o?"":o,raw_value:r,select_a_vocabulary_term:l})}}},storeMapping:function(t,e,n){var o=Object.assign(this.vocabularyMapping[t],Object(r.a)({},e,n));this.vocabularyMapping=Object.assign({},this.vocabularyMapping,Object(r.a)({},t,o))},transformedValue:function(t,e){return this.vocabularyMapping[t][e]}}},v=n(57),component=Object(v.a)(c,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("b-card",{staticClass:"annotation-card",attrs:{"no-body":""}},[n("b-card-header",[t._v(t._s(t.uiText.generalInstructions))]),t._v(" "),n("b-card-body",[n("b-table",{attrs:{striped:"",items:t.tableItems,fields:t.fields,fixed:""},scopedSlots:t._u([{key:"cell(select_a_vocabulary_term)",fn:function(e){return[n("b-form-input",{attrs:{trim:"","aria-describedby":"input-live-help input-live-feedback","data-cy":"vocab-term-"+t.title+"-"+e.index,id:"input-live",placeholder:t.uiText.placeholderText,state:t.vocabState},model:{value:e.item.select_a_vocabulary_term,callback:function(n){t.$set(e.item,"select_a_vocabulary_term",n)},expression:"row.item.select_a_vocabulary_term"}}),t._v(" "),n("b-form-text",{attrs:{id:"input-live-help"}},[t._v("\n                        "+t._s(t.uiText.vocabTermInstructions)+"\n                    ")])]}},{key:"cell(missing_value)",fn:function(e){return[n("b-button",{attrs:{variant:"danger"},on:{click:function(n){return t.declareMissing(e.item)}}},[t._v("\n                        "+t._s(t.uiText.missingValueButton)+"\n                    ")])]}}])}),t._v(" "),n("b-row",[n("b-button",{attrs:{"data-cy":"save-button-"+t.title,disabled:t.canSaveAnnotation,variant:t.saveButtonColor},on:{click:function(e){return t.applyAnnotation()}}},[t._v("\n                    "+t._s(t.uiText.saveButton)+"\n                ")])],1)],1)],1)],1)}),[],!1,null,null,null);e.default=component.exports}}]);